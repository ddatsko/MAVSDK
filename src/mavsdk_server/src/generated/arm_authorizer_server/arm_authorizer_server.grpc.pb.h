// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: arm_authorizer_server/arm_authorizer_server.proto
#ifndef GRPC_arm_5fauthorizer_5fserver_2farm_5fauthorizer_5fserver_2eproto__INCLUDED
#define GRPC_arm_5fauthorizer_5fserver_2farm_5fauthorizer_5fserver_2eproto__INCLUDED

#include "arm_authorizer_server/arm_authorizer_server.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/client_context.h>
#include <grpcpp/completion_queue.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/proto_utils.h>
#include <grpcpp/impl/rpc_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/status.h>
#include <grpcpp/support/stub_options.h>
#include <grpcpp/support/sync_stream.h>

namespace mavsdk {
namespace rpc {
namespace arm_authorizer {

class ArmAuthorizerServerService final {
 public:
  static constexpr char const* service_full_name() {
    return "mavsdk.rpc.arm_authorizer.ArmAuthorizerServerService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // Subscribe to arm authorization request messages. Each request received should respond to using RespondArmAuthorization
    std::unique_ptr< ::grpc::ClientReaderInterface< ::mavsdk::rpc::arm_authorizer::SubscribeArmAuthorizationResponse>> SubscribeArmAuthorization(::grpc::ClientContext* context, const ::mavsdk::rpc::arm_authorizer::SubscribeArmAuthorizationRequest& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::mavsdk::rpc::arm_authorizer::SubscribeArmAuthorizationResponse>>(SubscribeArmAuthorizationRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::mavsdk::rpc::arm_authorizer::SubscribeArmAuthorizationResponse>> AsyncSubscribeArmAuthorization(::grpc::ClientContext* context, const ::mavsdk::rpc::arm_authorizer::SubscribeArmAuthorizationRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::mavsdk::rpc::arm_authorizer::SubscribeArmAuthorizationResponse>>(AsyncSubscribeArmAuthorizationRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::mavsdk::rpc::arm_authorizer::SubscribeArmAuthorizationResponse>> PrepareAsyncSubscribeArmAuthorization(::grpc::ClientContext* context, const ::mavsdk::rpc::arm_authorizer::SubscribeArmAuthorizationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::mavsdk::rpc::arm_authorizer::SubscribeArmAuthorizationResponse>>(PrepareAsyncSubscribeArmAuthorizationRaw(context, request, cq));
    }
    // Authorize arm for the specific time
    virtual ::grpc::Status AcceptArmAuthorization(::grpc::ClientContext* context, const ::mavsdk::rpc::arm_authorizer::AcceptArmAuthorizationRequest& request, ::mavsdk::rpc::arm_authorizer::AcceptArmAuthorizationResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mavsdk::rpc::arm_authorizer::AcceptArmAuthorizationResponse>> AsyncAcceptArmAuthorization(::grpc::ClientContext* context, const ::mavsdk::rpc::arm_authorizer::AcceptArmAuthorizationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mavsdk::rpc::arm_authorizer::AcceptArmAuthorizationResponse>>(AsyncAcceptArmAuthorizationRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mavsdk::rpc::arm_authorizer::AcceptArmAuthorizationResponse>> PrepareAsyncAcceptArmAuthorization(::grpc::ClientContext* context, const ::mavsdk::rpc::arm_authorizer::AcceptArmAuthorizationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mavsdk::rpc::arm_authorizer::AcceptArmAuthorizationResponse>>(PrepareAsyncAcceptArmAuthorizationRaw(context, request, cq));
    }
    // Reject arm authorization request
    virtual ::grpc::Status RejectArmAuthorization(::grpc::ClientContext* context, const ::mavsdk::rpc::arm_authorizer::RejectArmAuthorizationRequest& request, ::mavsdk::rpc::arm_authorizer::RejectArmAuthorizationResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mavsdk::rpc::arm_authorizer::RejectArmAuthorizationResponse>> AsyncRejectArmAuthorization(::grpc::ClientContext* context, const ::mavsdk::rpc::arm_authorizer::RejectArmAuthorizationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mavsdk::rpc::arm_authorizer::RejectArmAuthorizationResponse>>(AsyncRejectArmAuthorizationRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mavsdk::rpc::arm_authorizer::RejectArmAuthorizationResponse>> PrepareAsyncRejectArmAuthorization(::grpc::ClientContext* context, const ::mavsdk::rpc::arm_authorizer::RejectArmAuthorizationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mavsdk::rpc::arm_authorizer::RejectArmAuthorizationResponse>>(PrepareAsyncRejectArmAuthorizationRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      // Subscribe to arm authorization request messages. Each request received should respond to using RespondArmAuthorization
      virtual void SubscribeArmAuthorization(::grpc::ClientContext* context, const ::mavsdk::rpc::arm_authorizer::SubscribeArmAuthorizationRequest* request, ::grpc::ClientReadReactor< ::mavsdk::rpc::arm_authorizer::SubscribeArmAuthorizationResponse>* reactor) = 0;
      // Authorize arm for the specific time
      virtual void AcceptArmAuthorization(::grpc::ClientContext* context, const ::mavsdk::rpc::arm_authorizer::AcceptArmAuthorizationRequest* request, ::mavsdk::rpc::arm_authorizer::AcceptArmAuthorizationResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void AcceptArmAuthorization(::grpc::ClientContext* context, const ::mavsdk::rpc::arm_authorizer::AcceptArmAuthorizationRequest* request, ::mavsdk::rpc::arm_authorizer::AcceptArmAuthorizationResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Reject arm authorization request
      virtual void RejectArmAuthorization(::grpc::ClientContext* context, const ::mavsdk::rpc::arm_authorizer::RejectArmAuthorizationRequest* request, ::mavsdk::rpc::arm_authorizer::RejectArmAuthorizationResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void RejectArmAuthorization(::grpc::ClientContext* context, const ::mavsdk::rpc::arm_authorizer::RejectArmAuthorizationRequest* request, ::mavsdk::rpc::arm_authorizer::RejectArmAuthorizationResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientReaderInterface< ::mavsdk::rpc::arm_authorizer::SubscribeArmAuthorizationResponse>* SubscribeArmAuthorizationRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::arm_authorizer::SubscribeArmAuthorizationRequest& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::mavsdk::rpc::arm_authorizer::SubscribeArmAuthorizationResponse>* AsyncSubscribeArmAuthorizationRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::arm_authorizer::SubscribeArmAuthorizationRequest& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::mavsdk::rpc::arm_authorizer::SubscribeArmAuthorizationResponse>* PrepareAsyncSubscribeArmAuthorizationRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::arm_authorizer::SubscribeArmAuthorizationRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mavsdk::rpc::arm_authorizer::AcceptArmAuthorizationResponse>* AsyncAcceptArmAuthorizationRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::arm_authorizer::AcceptArmAuthorizationRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mavsdk::rpc::arm_authorizer::AcceptArmAuthorizationResponse>* PrepareAsyncAcceptArmAuthorizationRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::arm_authorizer::AcceptArmAuthorizationRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mavsdk::rpc::arm_authorizer::RejectArmAuthorizationResponse>* AsyncRejectArmAuthorizationRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::arm_authorizer::RejectArmAuthorizationRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mavsdk::rpc::arm_authorizer::RejectArmAuthorizationResponse>* PrepareAsyncRejectArmAuthorizationRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::arm_authorizer::RejectArmAuthorizationRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    std::unique_ptr< ::grpc::ClientReader< ::mavsdk::rpc::arm_authorizer::SubscribeArmAuthorizationResponse>> SubscribeArmAuthorization(::grpc::ClientContext* context, const ::mavsdk::rpc::arm_authorizer::SubscribeArmAuthorizationRequest& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::mavsdk::rpc::arm_authorizer::SubscribeArmAuthorizationResponse>>(SubscribeArmAuthorizationRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::mavsdk::rpc::arm_authorizer::SubscribeArmAuthorizationResponse>> AsyncSubscribeArmAuthorization(::grpc::ClientContext* context, const ::mavsdk::rpc::arm_authorizer::SubscribeArmAuthorizationRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::mavsdk::rpc::arm_authorizer::SubscribeArmAuthorizationResponse>>(AsyncSubscribeArmAuthorizationRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::mavsdk::rpc::arm_authorizer::SubscribeArmAuthorizationResponse>> PrepareAsyncSubscribeArmAuthorization(::grpc::ClientContext* context, const ::mavsdk::rpc::arm_authorizer::SubscribeArmAuthorizationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::mavsdk::rpc::arm_authorizer::SubscribeArmAuthorizationResponse>>(PrepareAsyncSubscribeArmAuthorizationRaw(context, request, cq));
    }
    ::grpc::Status AcceptArmAuthorization(::grpc::ClientContext* context, const ::mavsdk::rpc::arm_authorizer::AcceptArmAuthorizationRequest& request, ::mavsdk::rpc::arm_authorizer::AcceptArmAuthorizationResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::arm_authorizer::AcceptArmAuthorizationResponse>> AsyncAcceptArmAuthorization(::grpc::ClientContext* context, const ::mavsdk::rpc::arm_authorizer::AcceptArmAuthorizationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::arm_authorizer::AcceptArmAuthorizationResponse>>(AsyncAcceptArmAuthorizationRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::arm_authorizer::AcceptArmAuthorizationResponse>> PrepareAsyncAcceptArmAuthorization(::grpc::ClientContext* context, const ::mavsdk::rpc::arm_authorizer::AcceptArmAuthorizationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::arm_authorizer::AcceptArmAuthorizationResponse>>(PrepareAsyncAcceptArmAuthorizationRaw(context, request, cq));
    }
    ::grpc::Status RejectArmAuthorization(::grpc::ClientContext* context, const ::mavsdk::rpc::arm_authorizer::RejectArmAuthorizationRequest& request, ::mavsdk::rpc::arm_authorizer::RejectArmAuthorizationResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::arm_authorizer::RejectArmAuthorizationResponse>> AsyncRejectArmAuthorization(::grpc::ClientContext* context, const ::mavsdk::rpc::arm_authorizer::RejectArmAuthorizationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::arm_authorizer::RejectArmAuthorizationResponse>>(AsyncRejectArmAuthorizationRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::arm_authorizer::RejectArmAuthorizationResponse>> PrepareAsyncRejectArmAuthorization(::grpc::ClientContext* context, const ::mavsdk::rpc::arm_authorizer::RejectArmAuthorizationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::arm_authorizer::RejectArmAuthorizationResponse>>(PrepareAsyncRejectArmAuthorizationRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void SubscribeArmAuthorization(::grpc::ClientContext* context, const ::mavsdk::rpc::arm_authorizer::SubscribeArmAuthorizationRequest* request, ::grpc::ClientReadReactor< ::mavsdk::rpc::arm_authorizer::SubscribeArmAuthorizationResponse>* reactor) override;
      void AcceptArmAuthorization(::grpc::ClientContext* context, const ::mavsdk::rpc::arm_authorizer::AcceptArmAuthorizationRequest* request, ::mavsdk::rpc::arm_authorizer::AcceptArmAuthorizationResponse* response, std::function<void(::grpc::Status)>) override;
      void AcceptArmAuthorization(::grpc::ClientContext* context, const ::mavsdk::rpc::arm_authorizer::AcceptArmAuthorizationRequest* request, ::mavsdk::rpc::arm_authorizer::AcceptArmAuthorizationResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void RejectArmAuthorization(::grpc::ClientContext* context, const ::mavsdk::rpc::arm_authorizer::RejectArmAuthorizationRequest* request, ::mavsdk::rpc::arm_authorizer::RejectArmAuthorizationResponse* response, std::function<void(::grpc::Status)>) override;
      void RejectArmAuthorization(::grpc::ClientContext* context, const ::mavsdk::rpc::arm_authorizer::RejectArmAuthorizationRequest* request, ::mavsdk::rpc::arm_authorizer::RejectArmAuthorizationResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientReader< ::mavsdk::rpc::arm_authorizer::SubscribeArmAuthorizationResponse>* SubscribeArmAuthorizationRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::arm_authorizer::SubscribeArmAuthorizationRequest& request) override;
    ::grpc::ClientAsyncReader< ::mavsdk::rpc::arm_authorizer::SubscribeArmAuthorizationResponse>* AsyncSubscribeArmAuthorizationRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::arm_authorizer::SubscribeArmAuthorizationRequest& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::mavsdk::rpc::arm_authorizer::SubscribeArmAuthorizationResponse>* PrepareAsyncSubscribeArmAuthorizationRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::arm_authorizer::SubscribeArmAuthorizationRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::arm_authorizer::AcceptArmAuthorizationResponse>* AsyncAcceptArmAuthorizationRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::arm_authorizer::AcceptArmAuthorizationRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::arm_authorizer::AcceptArmAuthorizationResponse>* PrepareAsyncAcceptArmAuthorizationRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::arm_authorizer::AcceptArmAuthorizationRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::arm_authorizer::RejectArmAuthorizationResponse>* AsyncRejectArmAuthorizationRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::arm_authorizer::RejectArmAuthorizationRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::arm_authorizer::RejectArmAuthorizationResponse>* PrepareAsyncRejectArmAuthorizationRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::arm_authorizer::RejectArmAuthorizationRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_SubscribeArmAuthorization_;
    const ::grpc::internal::RpcMethod rpcmethod_AcceptArmAuthorization_;
    const ::grpc::internal::RpcMethod rpcmethod_RejectArmAuthorization_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // Subscribe to arm authorization request messages. Each request received should respond to using RespondArmAuthorization
    virtual ::grpc::Status SubscribeArmAuthorization(::grpc::ServerContext* context, const ::mavsdk::rpc::arm_authorizer::SubscribeArmAuthorizationRequest* request, ::grpc::ServerWriter< ::mavsdk::rpc::arm_authorizer::SubscribeArmAuthorizationResponse>* writer);
    // Authorize arm for the specific time
    virtual ::grpc::Status AcceptArmAuthorization(::grpc::ServerContext* context, const ::mavsdk::rpc::arm_authorizer::AcceptArmAuthorizationRequest* request, ::mavsdk::rpc::arm_authorizer::AcceptArmAuthorizationResponse* response);
    // Reject arm authorization request
    virtual ::grpc::Status RejectArmAuthorization(::grpc::ServerContext* context, const ::mavsdk::rpc::arm_authorizer::RejectArmAuthorizationRequest* request, ::mavsdk::rpc::arm_authorizer::RejectArmAuthorizationResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_SubscribeArmAuthorization : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SubscribeArmAuthorization() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_SubscribeArmAuthorization() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubscribeArmAuthorization(::grpc::ServerContext* /*context*/, const ::mavsdk::rpc::arm_authorizer::SubscribeArmAuthorizationRequest* /*request*/, ::grpc::ServerWriter< ::mavsdk::rpc::arm_authorizer::SubscribeArmAuthorizationResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSubscribeArmAuthorization(::grpc::ServerContext* context, ::mavsdk::rpc::arm_authorizer::SubscribeArmAuthorizationRequest* request, ::grpc::ServerAsyncWriter< ::mavsdk::rpc::arm_authorizer::SubscribeArmAuthorizationResponse>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(0, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_AcceptArmAuthorization : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_AcceptArmAuthorization() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_AcceptArmAuthorization() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AcceptArmAuthorization(::grpc::ServerContext* /*context*/, const ::mavsdk::rpc::arm_authorizer::AcceptArmAuthorizationRequest* /*request*/, ::mavsdk::rpc::arm_authorizer::AcceptArmAuthorizationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAcceptArmAuthorization(::grpc::ServerContext* context, ::mavsdk::rpc::arm_authorizer::AcceptArmAuthorizationRequest* request, ::grpc::ServerAsyncResponseWriter< ::mavsdk::rpc::arm_authorizer::AcceptArmAuthorizationResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_RejectArmAuthorization : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_RejectArmAuthorization() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_RejectArmAuthorization() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RejectArmAuthorization(::grpc::ServerContext* /*context*/, const ::mavsdk::rpc::arm_authorizer::RejectArmAuthorizationRequest* /*request*/, ::mavsdk::rpc::arm_authorizer::RejectArmAuthorizationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRejectArmAuthorization(::grpc::ServerContext* context, ::mavsdk::rpc::arm_authorizer::RejectArmAuthorizationRequest* request, ::grpc::ServerAsyncResponseWriter< ::mavsdk::rpc::arm_authorizer::RejectArmAuthorizationResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_SubscribeArmAuthorization<WithAsyncMethod_AcceptArmAuthorization<WithAsyncMethod_RejectArmAuthorization<Service > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_SubscribeArmAuthorization : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_SubscribeArmAuthorization() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackServerStreamingHandler< ::mavsdk::rpc::arm_authorizer::SubscribeArmAuthorizationRequest, ::mavsdk::rpc::arm_authorizer::SubscribeArmAuthorizationResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::mavsdk::rpc::arm_authorizer::SubscribeArmAuthorizationRequest* request) { return this->SubscribeArmAuthorization(context, request); }));
    }
    ~WithCallbackMethod_SubscribeArmAuthorization() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubscribeArmAuthorization(::grpc::ServerContext* /*context*/, const ::mavsdk::rpc::arm_authorizer::SubscribeArmAuthorizationRequest* /*request*/, ::grpc::ServerWriter< ::mavsdk::rpc::arm_authorizer::SubscribeArmAuthorizationResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::mavsdk::rpc::arm_authorizer::SubscribeArmAuthorizationResponse>* SubscribeArmAuthorization(
      ::grpc::CallbackServerContext* /*context*/, const ::mavsdk::rpc::arm_authorizer::SubscribeArmAuthorizationRequest* /*request*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_AcceptArmAuthorization : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_AcceptArmAuthorization() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::mavsdk::rpc::arm_authorizer::AcceptArmAuthorizationRequest, ::mavsdk::rpc::arm_authorizer::AcceptArmAuthorizationResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::mavsdk::rpc::arm_authorizer::AcceptArmAuthorizationRequest* request, ::mavsdk::rpc::arm_authorizer::AcceptArmAuthorizationResponse* response) { return this->AcceptArmAuthorization(context, request, response); }));}
    void SetMessageAllocatorFor_AcceptArmAuthorization(
        ::grpc::MessageAllocator< ::mavsdk::rpc::arm_authorizer::AcceptArmAuthorizationRequest, ::mavsdk::rpc::arm_authorizer::AcceptArmAuthorizationResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::mavsdk::rpc::arm_authorizer::AcceptArmAuthorizationRequest, ::mavsdk::rpc::arm_authorizer::AcceptArmAuthorizationResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_AcceptArmAuthorization() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AcceptArmAuthorization(::grpc::ServerContext* /*context*/, const ::mavsdk::rpc::arm_authorizer::AcceptArmAuthorizationRequest* /*request*/, ::mavsdk::rpc::arm_authorizer::AcceptArmAuthorizationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* AcceptArmAuthorization(
      ::grpc::CallbackServerContext* /*context*/, const ::mavsdk::rpc::arm_authorizer::AcceptArmAuthorizationRequest* /*request*/, ::mavsdk::rpc::arm_authorizer::AcceptArmAuthorizationResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_RejectArmAuthorization : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_RejectArmAuthorization() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::mavsdk::rpc::arm_authorizer::RejectArmAuthorizationRequest, ::mavsdk::rpc::arm_authorizer::RejectArmAuthorizationResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::mavsdk::rpc::arm_authorizer::RejectArmAuthorizationRequest* request, ::mavsdk::rpc::arm_authorizer::RejectArmAuthorizationResponse* response) { return this->RejectArmAuthorization(context, request, response); }));}
    void SetMessageAllocatorFor_RejectArmAuthorization(
        ::grpc::MessageAllocator< ::mavsdk::rpc::arm_authorizer::RejectArmAuthorizationRequest, ::mavsdk::rpc::arm_authorizer::RejectArmAuthorizationResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::mavsdk::rpc::arm_authorizer::RejectArmAuthorizationRequest, ::mavsdk::rpc::arm_authorizer::RejectArmAuthorizationResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_RejectArmAuthorization() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RejectArmAuthorization(::grpc::ServerContext* /*context*/, const ::mavsdk::rpc::arm_authorizer::RejectArmAuthorizationRequest* /*request*/, ::mavsdk::rpc::arm_authorizer::RejectArmAuthorizationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* RejectArmAuthorization(
      ::grpc::CallbackServerContext* /*context*/, const ::mavsdk::rpc::arm_authorizer::RejectArmAuthorizationRequest* /*request*/, ::mavsdk::rpc::arm_authorizer::RejectArmAuthorizationResponse* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_SubscribeArmAuthorization<WithCallbackMethod_AcceptArmAuthorization<WithCallbackMethod_RejectArmAuthorization<Service > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_SubscribeArmAuthorization : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SubscribeArmAuthorization() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_SubscribeArmAuthorization() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubscribeArmAuthorization(::grpc::ServerContext* /*context*/, const ::mavsdk::rpc::arm_authorizer::SubscribeArmAuthorizationRequest* /*request*/, ::grpc::ServerWriter< ::mavsdk::rpc::arm_authorizer::SubscribeArmAuthorizationResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_AcceptArmAuthorization : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_AcceptArmAuthorization() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_AcceptArmAuthorization() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AcceptArmAuthorization(::grpc::ServerContext* /*context*/, const ::mavsdk::rpc::arm_authorizer::AcceptArmAuthorizationRequest* /*request*/, ::mavsdk::rpc::arm_authorizer::AcceptArmAuthorizationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_RejectArmAuthorization : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_RejectArmAuthorization() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_RejectArmAuthorization() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RejectArmAuthorization(::grpc::ServerContext* /*context*/, const ::mavsdk::rpc::arm_authorizer::RejectArmAuthorizationRequest* /*request*/, ::mavsdk::rpc::arm_authorizer::RejectArmAuthorizationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_SubscribeArmAuthorization : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SubscribeArmAuthorization() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_SubscribeArmAuthorization() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubscribeArmAuthorization(::grpc::ServerContext* /*context*/, const ::mavsdk::rpc::arm_authorizer::SubscribeArmAuthorizationRequest* /*request*/, ::grpc::ServerWriter< ::mavsdk::rpc::arm_authorizer::SubscribeArmAuthorizationResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSubscribeArmAuthorization(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(0, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_AcceptArmAuthorization : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_AcceptArmAuthorization() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_AcceptArmAuthorization() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AcceptArmAuthorization(::grpc::ServerContext* /*context*/, const ::mavsdk::rpc::arm_authorizer::AcceptArmAuthorizationRequest* /*request*/, ::mavsdk::rpc::arm_authorizer::AcceptArmAuthorizationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAcceptArmAuthorization(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_RejectArmAuthorization : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_RejectArmAuthorization() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_RejectArmAuthorization() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RejectArmAuthorization(::grpc::ServerContext* /*context*/, const ::mavsdk::rpc::arm_authorizer::RejectArmAuthorizationRequest* /*request*/, ::mavsdk::rpc::arm_authorizer::RejectArmAuthorizationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRejectArmAuthorization(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_SubscribeArmAuthorization : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_SubscribeArmAuthorization() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const::grpc::ByteBuffer* request) { return this->SubscribeArmAuthorization(context, request); }));
    }
    ~WithRawCallbackMethod_SubscribeArmAuthorization() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubscribeArmAuthorization(::grpc::ServerContext* /*context*/, const ::mavsdk::rpc::arm_authorizer::SubscribeArmAuthorizationRequest* /*request*/, ::grpc::ServerWriter< ::mavsdk::rpc::arm_authorizer::SubscribeArmAuthorizationResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::grpc::ByteBuffer>* SubscribeArmAuthorization(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_AcceptArmAuthorization : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_AcceptArmAuthorization() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->AcceptArmAuthorization(context, request, response); }));
    }
    ~WithRawCallbackMethod_AcceptArmAuthorization() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AcceptArmAuthorization(::grpc::ServerContext* /*context*/, const ::mavsdk::rpc::arm_authorizer::AcceptArmAuthorizationRequest* /*request*/, ::mavsdk::rpc::arm_authorizer::AcceptArmAuthorizationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* AcceptArmAuthorization(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_RejectArmAuthorization : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_RejectArmAuthorization() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->RejectArmAuthorization(context, request, response); }));
    }
    ~WithRawCallbackMethod_RejectArmAuthorization() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RejectArmAuthorization(::grpc::ServerContext* /*context*/, const ::mavsdk::rpc::arm_authorizer::RejectArmAuthorizationRequest* /*request*/, ::mavsdk::rpc::arm_authorizer::RejectArmAuthorizationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* RejectArmAuthorization(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_AcceptArmAuthorization : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_AcceptArmAuthorization() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::mavsdk::rpc::arm_authorizer::AcceptArmAuthorizationRequest, ::mavsdk::rpc::arm_authorizer::AcceptArmAuthorizationResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::mavsdk::rpc::arm_authorizer::AcceptArmAuthorizationRequest, ::mavsdk::rpc::arm_authorizer::AcceptArmAuthorizationResponse>* streamer) {
                       return this->StreamedAcceptArmAuthorization(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_AcceptArmAuthorization() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status AcceptArmAuthorization(::grpc::ServerContext* /*context*/, const ::mavsdk::rpc::arm_authorizer::AcceptArmAuthorizationRequest* /*request*/, ::mavsdk::rpc::arm_authorizer::AcceptArmAuthorizationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedAcceptArmAuthorization(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::mavsdk::rpc::arm_authorizer::AcceptArmAuthorizationRequest,::mavsdk::rpc::arm_authorizer::AcceptArmAuthorizationResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_RejectArmAuthorization : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_RejectArmAuthorization() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::mavsdk::rpc::arm_authorizer::RejectArmAuthorizationRequest, ::mavsdk::rpc::arm_authorizer::RejectArmAuthorizationResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::mavsdk::rpc::arm_authorizer::RejectArmAuthorizationRequest, ::mavsdk::rpc::arm_authorizer::RejectArmAuthorizationResponse>* streamer) {
                       return this->StreamedRejectArmAuthorization(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_RejectArmAuthorization() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status RejectArmAuthorization(::grpc::ServerContext* /*context*/, const ::mavsdk::rpc::arm_authorizer::RejectArmAuthorizationRequest* /*request*/, ::mavsdk::rpc::arm_authorizer::RejectArmAuthorizationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedRejectArmAuthorization(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::mavsdk::rpc::arm_authorizer::RejectArmAuthorizationRequest,::mavsdk::rpc::arm_authorizer::RejectArmAuthorizationResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_AcceptArmAuthorization<WithStreamedUnaryMethod_RejectArmAuthorization<Service > > StreamedUnaryService;
  template <class BaseClass>
  class WithSplitStreamingMethod_SubscribeArmAuthorization : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithSplitStreamingMethod_SubscribeArmAuthorization() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::SplitServerStreamingHandler<
          ::mavsdk::rpc::arm_authorizer::SubscribeArmAuthorizationRequest, ::mavsdk::rpc::arm_authorizer::SubscribeArmAuthorizationResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerSplitStreamer<
                     ::mavsdk::rpc::arm_authorizer::SubscribeArmAuthorizationRequest, ::mavsdk::rpc::arm_authorizer::SubscribeArmAuthorizationResponse>* streamer) {
                       return this->StreamedSubscribeArmAuthorization(context,
                         streamer);
                  }));
    }
    ~WithSplitStreamingMethod_SubscribeArmAuthorization() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SubscribeArmAuthorization(::grpc::ServerContext* /*context*/, const ::mavsdk::rpc::arm_authorizer::SubscribeArmAuthorizationRequest* /*request*/, ::grpc::ServerWriter< ::mavsdk::rpc::arm_authorizer::SubscribeArmAuthorizationResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedSubscribeArmAuthorization(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::mavsdk::rpc::arm_authorizer::SubscribeArmAuthorizationRequest,::mavsdk::rpc::arm_authorizer::SubscribeArmAuthorizationResponse>* server_split_streamer) = 0;
  };
  typedef WithSplitStreamingMethod_SubscribeArmAuthorization<Service > SplitStreamedService;
  typedef WithSplitStreamingMethod_SubscribeArmAuthorization<WithStreamedUnaryMethod_AcceptArmAuthorization<WithStreamedUnaryMethod_RejectArmAuthorization<Service > > > StreamedService;
};

}  // namespace arm_authorizer
}  // namespace rpc
}  // namespace mavsdk


#endif  // GRPC_arm_5fauthorizer_5fserver_2farm_5fauthorizer_5fserver_2eproto__INCLUDED
