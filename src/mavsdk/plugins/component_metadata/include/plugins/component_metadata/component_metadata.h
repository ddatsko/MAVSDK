// WARNING: THIS FILE IS AUTOGENERATED! As such, it should not be edited.
// Edits need to be made to the proto files
// (see
// https://github.com/mavlink/MAVSDK-Proto/blob/main/protos/component_metadata/component_metadata.proto)

#pragma once

#include <array>
#include <cmath>
#include <functional>
#include <limits>
#include <memory>
#include <string>
#include <utility>
#include <vector>

#include "mavlink_include.h"
#include "plugin_base.h"

#include "handle.h"

namespace mavsdk {

class System;
class ComponentMetadataImpl;

/**
 * @brief Access component metadata such as parameters.
 */
class ComponentMetadata : public PluginBase {
public:
    /**
     * @brief Constructor. Creates the plugin for a specific System.
     *
     * The plugin is typically created as shown below:
     *
     *     ```cpp
     *     auto component_metadata = ComponentMetadata(system);
     *     ```
     *
     * @param system The specific system associated with this plugin.
     */
    explicit ComponentMetadata(
        System& system,
        std::vector<uint8_t> components_to_request = {MAV_COMP_ID_AUTOPILOT1}); // deprecated

    /**
     * @brief Constructor. Creates the plugin for a specific System.
     *
     * The plugin is typically created as shown below:
     *
     *     ```cpp
     *     auto component_metadata = ComponentMetadata(system);
     *     ```
     *
     * @param system The specific system associated with this plugin.
     */
    explicit ComponentMetadata(
        std::shared_ptr<System> system,
        std::vector<uint8_t> components_to_request = {MAV_COMP_ID_AUTOPILOT1}); // new

    /**
     * @brief Destructor (internal use only).
     */
    ~ComponentMetadata() override;

    enum class MetadataType {
        Parameter,
        Events,
        Actuators,
    };

    std::pair<bool, std::string> get_metadata(MetadataType type, uint32_t compid);

    using NotificationCallback =
        std::function<void(MetadataType type, uint32_t compid, const std::string& json_data)>;

    void register_notification_callback(const NotificationCallback& callback);

    /**
     * @brief Copy constructor.
     */
    ComponentMetadata(const ComponentMetadata& other) = delete;

    /**
     * @brief Equality operator (object is not copyable).
     */
    const ComponentMetadata& operator=(const ComponentMetadata&) = delete;

private:
    /** @private Underlying implementation, set at instantiation */
    std::unique_ptr<ComponentMetadataImpl> _impl;
};

} // namespace mavsdk